// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Grpc.proto

#ifndef PROTOBUF_INCLUDED_Grpc_2eproto
#define PROTOBUF_INCLUDED_Grpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Grpc_2eproto 

namespace protobuf_Grpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Grpc_2eproto
namespace example {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Rbox;
class RboxDefaultTypeInternal;
extern RboxDefaultTypeInternal _Rbox_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace example
namespace google {
namespace protobuf {
template<> ::example::Object* Arena::CreateMaybeMessage<::example::Object>(Arena*);
template<> ::example::Rbox* Arena::CreateMaybeMessage<::example::Rbox>(Arena*);
template<> ::example::Request* Arena::CreateMaybeMessage<::example::Request>(Arena*);
template<> ::example::Response* Arena::CreateMaybeMessage<::example::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace example {

// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes encoded_image = 1;
  void clear_encoded_image();
  static const int kEncodedImageFieldNumber = 1;
  const ::std::string& encoded_image() const;
  void set_encoded_image(const ::std::string& value);
  #if LANG_CXX11
  void set_encoded_image(::std::string&& value);
  #endif
  void set_encoded_image(const char* value);
  void set_encoded_image(const void* value, size_t size);
  ::std::string* mutable_encoded_image();
  ::std::string* release_encoded_image();
  void set_allocated_encoded_image(::std::string* encoded_image);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:example.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr encoded_image_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Grpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rbox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.Rbox) */ {
 public:
  Rbox();
  virtual ~Rbox();

  Rbox(const Rbox& from);

  inline Rbox& operator=(const Rbox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rbox(Rbox&& from) noexcept
    : Rbox() {
    *this = ::std::move(from);
  }

  inline Rbox& operator=(Rbox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rbox* internal_default_instance() {
    return reinterpret_cast<const Rbox*>(
               &_Rbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Rbox* other);
  friend void swap(Rbox& a, Rbox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rbox* New() const final {
    return CreateMaybeMessage<Rbox>(NULL);
  }

  Rbox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rbox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rbox& from);
  void MergeFrom(const Rbox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rbox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float w = 3;
  void clear_w();
  static const int kWFieldNumber = 3;
  float w() const;
  void set_w(float value);

  // float h = 4;
  void clear_h();
  static const int kHFieldNumber = 4;
  float h() const;
  void set_h(float value);

  // float theta = 5;
  void clear_theta();
  static const int kThetaFieldNumber = 5;
  float theta() const;
  void set_theta(float value);

  // @@protoc_insertion_point(class_scope:example.Rbox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float w_;
  float h_;
  float theta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Grpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(NULL);
  }

  Object* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string class_name = 2;
  void clear_class_name();
  static const int kClassNameFieldNumber = 2;
  const ::std::string& class_name() const;
  void set_class_name(const ::std::string& value);
  #if LANG_CXX11
  void set_class_name(::std::string&& value);
  #endif
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  ::std::string* mutable_class_name();
  ::std::string* release_class_name();
  void set_allocated_class_name(::std::string* class_name);

  // .example.Rbox rbox = 1;
  bool has_rbox() const;
  void clear_rbox();
  static const int kRboxFieldNumber = 1;
  private:
  const ::example::Rbox& _internal_rbox() const;
  public:
  const ::example::Rbox& rbox() const;
  ::example::Rbox* release_rbox();
  ::example::Rbox* mutable_rbox();
  void set_allocated_rbox(::example::Rbox* rbox);

  // float score = 3;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:example.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr class_name_;
  ::example::Rbox* rbox_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Grpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .example.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::example::Object* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::example::Object >*
      mutable_objects();
  const ::example::Object& objects(int index) const;
  ::example::Object* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::example::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:example.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::example::Object > objects_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Grpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// bytes encoded_image = 1;
inline void Request::clear_encoded_image() {
  encoded_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::encoded_image() const {
  // @@protoc_insertion_point(field_get:example.Request.encoded_image)
  return encoded_image_.GetNoArena();
}
inline void Request::set_encoded_image(const ::std::string& value) {
  
  encoded_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.Request.encoded_image)
}
#if LANG_CXX11
inline void Request::set_encoded_image(::std::string&& value) {
  
  encoded_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.Request.encoded_image)
}
#endif
inline void Request::set_encoded_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encoded_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.Request.encoded_image)
}
inline void Request::set_encoded_image(const void* value, size_t size) {
  
  encoded_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.Request.encoded_image)
}
inline ::std::string* Request::mutable_encoded_image() {
  
  // @@protoc_insertion_point(field_mutable:example.Request.encoded_image)
  return encoded_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_encoded_image() {
  // @@protoc_insertion_point(field_release:example.Request.encoded_image)
  
  return encoded_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_encoded_image(::std::string* encoded_image) {
  if (encoded_image != NULL) {
    
  } else {
    
  }
  encoded_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoded_image);
  // @@protoc_insertion_point(field_set_allocated:example.Request.encoded_image)
}

// int32 width = 2;
inline void Request::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Request::width() const {
  // @@protoc_insertion_point(field_get:example.Request.width)
  return width_;
}
inline void Request::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:example.Request.width)
}

// int32 height = 3;
inline void Request::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Request::height() const {
  // @@protoc_insertion_point(field_get:example.Request.height)
  return height_;
}
inline void Request::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:example.Request.height)
}

// -------------------------------------------------------------------

// Rbox

// float x = 1;
inline void Rbox::clear_x() {
  x_ = 0;
}
inline float Rbox::x() const {
  // @@protoc_insertion_point(field_get:example.Rbox.x)
  return x_;
}
inline void Rbox::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:example.Rbox.x)
}

// float y = 2;
inline void Rbox::clear_y() {
  y_ = 0;
}
inline float Rbox::y() const {
  // @@protoc_insertion_point(field_get:example.Rbox.y)
  return y_;
}
inline void Rbox::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:example.Rbox.y)
}

// float w = 3;
inline void Rbox::clear_w() {
  w_ = 0;
}
inline float Rbox::w() const {
  // @@protoc_insertion_point(field_get:example.Rbox.w)
  return w_;
}
inline void Rbox::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:example.Rbox.w)
}

// float h = 4;
inline void Rbox::clear_h() {
  h_ = 0;
}
inline float Rbox::h() const {
  // @@protoc_insertion_point(field_get:example.Rbox.h)
  return h_;
}
inline void Rbox::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:example.Rbox.h)
}

// float theta = 5;
inline void Rbox::clear_theta() {
  theta_ = 0;
}
inline float Rbox::theta() const {
  // @@protoc_insertion_point(field_get:example.Rbox.theta)
  return theta_;
}
inline void Rbox::set_theta(float value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:example.Rbox.theta)
}

// -------------------------------------------------------------------

// Object

// .example.Rbox rbox = 1;
inline bool Object::has_rbox() const {
  return this != internal_default_instance() && rbox_ != NULL;
}
inline void Object::clear_rbox() {
  if (GetArenaNoVirtual() == NULL && rbox_ != NULL) {
    delete rbox_;
  }
  rbox_ = NULL;
}
inline const ::example::Rbox& Object::_internal_rbox() const {
  return *rbox_;
}
inline const ::example::Rbox& Object::rbox() const {
  const ::example::Rbox* p = rbox_;
  // @@protoc_insertion_point(field_get:example.Object.rbox)
  return p != NULL ? *p : *reinterpret_cast<const ::example::Rbox*>(
      &::example::_Rbox_default_instance_);
}
inline ::example::Rbox* Object::release_rbox() {
  // @@protoc_insertion_point(field_release:example.Object.rbox)
  
  ::example::Rbox* temp = rbox_;
  rbox_ = NULL;
  return temp;
}
inline ::example::Rbox* Object::mutable_rbox() {
  
  if (rbox_ == NULL) {
    auto* p = CreateMaybeMessage<::example::Rbox>(GetArenaNoVirtual());
    rbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:example.Object.rbox)
  return rbox_;
}
inline void Object::set_allocated_rbox(::example::Rbox* rbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rbox_;
  }
  if (rbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rbox, submessage_arena);
    }
    
  } else {
    
  }
  rbox_ = rbox;
  // @@protoc_insertion_point(field_set_allocated:example.Object.rbox)
}

// string class_name = 2;
inline void Object::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::class_name() const {
  // @@protoc_insertion_point(field_get:example.Object.class_name)
  return class_name_.GetNoArena();
}
inline void Object::set_class_name(const ::std::string& value) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.Object.class_name)
}
#if LANG_CXX11
inline void Object::set_class_name(::std::string&& value) {
  
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.Object.class_name)
}
#endif
inline void Object::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.Object.class_name)
}
inline void Object::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.Object.class_name)
}
inline ::std::string* Object::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:example.Object.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_class_name() {
  // @@protoc_insertion_point(field_release:example.Object.class_name)
  
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:example.Object.class_name)
}

// float score = 3;
inline void Object::clear_score() {
  score_ = 0;
}
inline float Object::score() const {
  // @@protoc_insertion_point(field_get:example.Object.score)
  return score_;
}
inline void Object::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:example.Object.score)
}

// -------------------------------------------------------------------

// Response

// repeated .example.Object objects = 1;
inline int Response::objects_size() const {
  return objects_.size();
}
inline void Response::clear_objects() {
  objects_.Clear();
}
inline ::example::Object* Response::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:example.Response.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::example::Object >*
Response::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:example.Response.objects)
  return &objects_;
}
inline const ::example::Object& Response::objects(int index) const {
  // @@protoc_insertion_point(field_get:example.Response.objects)
  return objects_.Get(index);
}
inline ::example::Object* Response::add_objects() {
  // @@protoc_insertion_point(field_add:example.Response.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::example::Object >&
Response::objects() const {
  // @@protoc_insertion_point(field_list:example.Response.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Grpc_2eproto
