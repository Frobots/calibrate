// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Grpc.proto

#include "Grpc.pb.h"
#include "Grpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace example {

static const char* FormatData_method_names[] = {
  "/example.FormatData/DoFormat",
};

std::unique_ptr< FormatData::Stub> FormatData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FormatData::Stub> stub(new FormatData::Stub(channel));
  return stub;
}

FormatData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoFormat_(FormatData_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FormatData::Stub::DoFormat(::grpc::ClientContext* context, const ::example::Request& request, ::example::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoFormat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::example::Response>* FormatData::Stub::AsyncDoFormatRaw(::grpc::ClientContext* context, const ::example::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::example::Response>::Create(channel_.get(), cq, rpcmethod_DoFormat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::example::Response>* FormatData::Stub::PrepareAsyncDoFormatRaw(::grpc::ClientContext* context, const ::example::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::example::Response>::Create(channel_.get(), cq, rpcmethod_DoFormat_, context, request, false);
}

FormatData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FormatData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FormatData::Service, ::example::Request, ::example::Response>(
          std::mem_fn(&FormatData::Service::DoFormat), this)));
}

FormatData::Service::~Service() {
}

::grpc::Status FormatData::Service::DoFormat(::grpc::ServerContext* context, const ::example::Request* request, ::example::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace example

